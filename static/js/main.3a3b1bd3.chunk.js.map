{"version":3,"sources":["img/chameleon.jpg","img/SelfDefense.PNG","img/Pets.PNG","img/LifeStyle.PNG","img/LoveAndRelationships.PNG","img/Hacks.PNG","img/Healthy.jpg","img/Music.PNG","img/Excersice.PNG","components/Toolbar/Toolbar.js","components/GridContainer/Gridcontainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Toolbar","props","className","style","backgroundImage","NavChameleon","href","Gridcontainer","Grid","container","direction","justify","alignItems","onClick","console","log","item","xs","src","SF","alt","height","width","Pets","LS","Hacks","LR","Healthy","Music","Excersice","React","Component","App","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,kD,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,6OCqB5BC,EAjBC,SAAAC,GAAK,OACjB,4BAAQC,UAAU,UAAUC,MAAO,CAACC,gBAAiBC,MACjD,yBAAKH,UAAU,uBACX,8BACA,yBAAKA,UAAU,iBAAgB,uBAAGI,KAAK,KAAR,cAC/B,yBAAKJ,UAAU,WACf,yBAAKA,UAAU,kC,wJC8CZK,E,iLAzCX,OAAQ,6BACN,kBAACC,EAAA,EAAD,CACEC,WAAW,EACXC,UAAU,SACVC,QAAQ,SACRC,WAAW,UAEX,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,UAC1D,kBAACJ,EAAA,EAAD,CAAMK,QAAU,kBAAMC,QAAQC,IAAI,WAAWC,MAAM,EAAMC,GAAI,GAC3D,yBAAKC,IAAKC,IAAIC,IAAI,GAAGC,OAAO,MAAMC,MAAM,SAE1C,kBAACd,EAAA,EAAD,CAAMQ,MAAM,EAAMC,GAAI,GACpB,yBAAKC,IAAKK,IAAMF,OAAO,MAAMC,MAAM,SAErC,kBAACd,EAAA,EAAD,CAAMQ,MAAM,EAAMC,GAAI,GACpB,yBAAKC,IAAKM,IAAIH,OAAO,MAAMC,MAAM,SAEnC,kBAACd,EAAA,EAAD,CAAMQ,MAAM,EAAMC,GAAI,GACpB,yBAAKC,IAAKO,IAAOJ,OAAO,MAAMC,MAAM,UAGxC,kBAACd,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,UAC1D,kBAACJ,EAAA,EAAD,CAAMQ,MAAM,EAAMC,GAAI,GACpB,yBAAKC,IAAKQ,IAAIL,OAAO,MAAMC,MAAM,SAEnC,kBAACd,EAAA,EAAD,CAAMQ,MAAM,EAAMC,GAAI,GACpB,yBAAKC,IAAKS,IAASN,OAAO,MAAMC,MAAM,SAExC,kBAACd,EAAA,EAAD,CAAMQ,MAAM,EAAMC,GAAI,GACpB,yBAAKC,IAAKU,IAAOP,OAAO,MAAMC,MAAM,SAEtC,kBAACd,EAAA,EAAD,CAAMQ,MAAM,EAAMC,GAAI,GACpB,yBAAKC,IAAKW,IAAWR,OAAO,MAAMC,MAAM,gB,GAlCxBQ,IAAMC,WCInBC,E,iLAXb,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,0BAAMC,MAAO,CAAC8B,UAAW,SAEzB,kBAAC,EAAD,Y,GAPYF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.3a3b1bd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chameleon.8adc6098.jpg\";","module.exports = __webpack_public_path__ + \"static/media/SelfDefense.43859fab.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Pets.955f8250.PNG\";","module.exports = __webpack_public_path__ + \"static/media/LifeStyle.15dae0ea.PNG\";","module.exports = __webpack_public_path__ + \"static/media/LoveAndRelationships.0ac0cfd3.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Hacks.2be0be92.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Healthy.8d55cb94.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Music.7ecf0346.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Excersice.84c84cba.PNG\";","import React from 'react';\r\nimport './Toolbar.css';\r\nimport NavChameleon from '../../img/chameleon.jpg';\r\n\r\nconst Toolbar = props => (\r\n    <header className='toolbar' style={{backgroundImage: NavChameleon}}>\r\n        <nav className='toolbar__navigation'>\r\n            <div></div>\r\n            <div className='toolbar__logo'><a href='/'>Chameleon</a></div>\r\n            <div className='spacer' />\r\n            <div className='toolbar__navigation__items'>\r\n            {/*\r\n                <ul>\r\n                    <li><a href='../AboutMe/Aboutme'>About me</a></li>\r\n                </ul> */\r\n            }\r\n            </div>\r\n        </nav>\r\n    </header>\r\n);\r\n\r\nexport default Toolbar;\r\n","import './Gridcontainer.css';\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SF from \"../../img/SelfDefense.PNG\";\r\nimport Pets from \"../../img/Pets.PNG\";\r\nimport LS from \"../../img/LifeStyle.PNG\";\r\nimport LR from \"../../img/LoveAndRelationships.PNG\";\r\nimport Hacks from \"../../img/Hacks.PNG\";\r\nimport Healthy from \"../../img/Healthy.jpg\";\r\nimport Music from \"../../img/Music.PNG\";\r\nimport Excersice from \"../../img/Excersice.PNG\";\r\n\r\n\r\nclass Gridcontainer extends React.Component {\r\n  render() {\r\n    return (<div > \r\n      <Grid\r\n        container={true}\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n          <Grid onClick={ () => console.log(\"Ramiro\")} item={true} xs={3}>\r\n            <img src={SF} alt='' height=\"195\" width=\"320\" />\r\n          </Grid>\r\n          <Grid item={true} xs={3}>\r\n            <img src={Pets} height=\"195\" width=\"320\" />\r\n          </Grid>\r\n          <Grid item={true} xs={3}>\r\n            <img src={LS} height=\"195\" width=\"320\" />\r\n          </Grid>\r\n          <Grid item={true} xs={3}>\r\n            <img src={Hacks} height=\"195\" width=\"320\" />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n          <Grid item={true} xs={3}>\r\n            <img src={LR} height=\"195\" width=\"320\" />\r\n          </Grid>\r\n          <Grid item={true} xs={3}>\r\n            <img src={Healthy} height=\"195\" width=\"320\" />\r\n          </Grid>\r\n          <Grid item={true} xs={3}>\r\n            <img src={Music} height=\"195\" width=\"320\" />\r\n          </Grid>\r\n          <Grid item={true} xs={3}>\r\n            <img src={Excersice} height=\"195\" width=\"320\" />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gridcontainer;\r\n","import React, { Component }from 'react';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport Gridcontainer from './components/GridContainer/Gridcontainer';\n\nclass App extends Component {\n  render(){\n  return (\n    <div className=\"App\">\n      <Toolbar />\n      <main style={{marginTop: '65px'}}>\n\n      <Gridcontainer />\n      </main>\n    </div>\n     )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}